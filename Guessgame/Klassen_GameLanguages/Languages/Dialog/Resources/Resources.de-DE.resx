<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GameDialog_NiceToSeeYouAgain" xml:space="preserve">
    <value>Schön dich wieder zu sehen!</value>
  </data>
  <data name="GameDialog_ReadyForChallenge" xml:space="preserve">
    <value>bist du bereit, dich in einer mathematischen Herausforderung zu stellen?</value>
  </data>
  <data name="GameDialog_ReadyToTakeChallengeAgain" xml:space="preserve">
    <value>bist du bereit, wieder die Herausforderung zu nehmen</value>
  </data>
  <data name="GameDialog_WelcomeToWorld" xml:space="preserve">
    <value>Willkommen in der Welt der Zahlen!</value>
  </data>
  <data name="GameOver_DontGiveUp" xml:space="preserve">
    <value>Aber gib nicht auf! Du kannst es immer wieder versuchen.</value>
  </data>
  <data name="GameOver_HaveFunNextGame" xml:space="preserve">
    <value>Viel Spaß beim nächsten Spiel!</value>
  </data>
  <data name="GameOver_Sorry" xml:space="preserve">
    <value>Schade {0} Spiel ist zwar vorbei!! Erreichte Spielstand: {1}</value>
  </data>
  <data name="Introduce_DidYouKnow" xml:space="preserve">
    <value>Wusstest du, dass Zahlen nicht nur mathematische Symbole sind?</value>
  </data>
  <data name="Introduce_KnownNumbers" xml:space="preserve">
    <value>Neben bekannten Zahlen wie den Primzahlen gibt es auch Happy-Zahlen Smith Zahlen, Narzisstische Zahlen</value>
  </data>
  <data name="Introduce_LetMeGuide" xml:space="preserve">
    <value>Lass mich dich auf diese aufschlussreiche Reise in die bemerkenswerte Welt der Zahlen führen und du wirst nie wieder auf sie schauen wie zuvor.</value>
  </data>
  <data name="Introduce_LetsBegin" xml:space="preserve">
    <value>Lass uns anfangen!</value>
  </data>
  <data name="Introduce_OtherNumbers" xml:space="preserve">
    <value>Übrigens, es gibt noch zahlreiche andere Zahlen. Jede mit ihren eigenen verborgenen Geheimnissen und Eigenschaften.</value>
  </data>
  <data name="Introduce_Roles" xml:space="preserve">
    <value>Jenseits ihrer offensichtlichen Rollen besitzen bestimmte Zahlen einzigartige und fazinierenden Eigenschaften und Geschichten.</value>
  </data>
  <data name="Introduce_Welcome" xml:space="preserve">
    <value>Herzlich Willkommen!</value>
  </data>
  <data name="StartGame_HaveFunPlaying" xml:space="preserve">
    <value>Viel Spaß beim Spielen!</value>
  </data>
  <data name="StartGame_NowYouCanProve" xml:space="preserve">
    <value>Jetzt kannst du dich in der Welt der Zahlen beweisen.</value>
  </data>
  <data name="StartGame_WellDone" xml:space="preserve">
    <value>Sehr gut {0} Du hast es geschafft!</value>
  </data>
</root>